Этот пример демонстрирует базовую структуру для аутентификации через Google в Angular 19 с использованием RxJS. Пользователь может войти через Google, и после успешной аутентификации появляется возможность сменить пароль13.

Обратите внимание, что вам нужно заменить YOUR_GOOGLE_CLIENT_ID на реальный идентификатор клиента Google, полученный в Google Cloud Console2.

Для полной реализации смены пароля потребуется дополнительная логика на бэкенде и, возможно, дополнительные компоненты для ввода нового пароля.

YOUR_GOOGLE_CLIENT_ID - это уникальный идентификатор, который необходимо получить при создании проекта в Google Cloud Platform для использования API Google в вашем приложении. Он не относится к конкретному пользователю, а представляет само приложение.

Чтобы получить YOUR_GOOGLE_CLIENT_ID:

Войдите в Google Cloud Console как администратор.

Создайте новый проект или выберите существующий4.

Включите необходимые API для вашего приложения в разделе "API и сервисы" > "Библиотека"4.

Перейдите в раздел "Учетные данные" и создайте новые учетные данные типа "Идентификатор клиента OAuth"2.

После создания вы получите Client ID и Client Secret для вашего приложения2.

Важно отметить, что этот Client ID относится к вашему приложению и отличается от Client ID, который Google Analytics присваивает отдельным пользователям вашего сайта



Чтобы получить Google Client ID для аутентификации пользователей в вашем приложении, выполните следующие шаги:

Создайте проект в Google Cloud Console:

Перейдите на Google Cloud Console.​
Нажмите на селектор проектов в верхней части страницы и выберите «Новый проект».​
Введите название проекта и нажмите «Создать».​
support.webasyst.ru
Настройте экран согласия OAuth:

В меню слева выберите «APIs & Services» > «OAuth consent screen».​
Выберите тип пользователя:​
support.google.com
External (Внешний): если ваше приложение предназначено для пользователей вне вашей организации.
Internal (Внутренний): если ваше приложение будет использоваться только внутри вашей организации.
Заполните необходимые поля, такие как название приложения, адрес электронной почты поддержки и т.д.​
Нажмите «Save and Continue» для сохранения настроек.​
blog.ithillel.ua
+1
support.webasyst.ru
+1
Создайте учетные данные OAuth 2.0:

В меню слева выберите «Credentials» (Учетные данные).​
academy.terrasoft.ua
Нажмите «Create Credentials» и выберите «OAuth client ID».​
support.webasyst.ru
+1
blog.ithillel.ua
+1
В разделе «Application type» выберите «Web application» (Веб-приложение).​
Введите название клиента (например, «My Web Client»).​
В разделе «Authorized redirect URIs» добавьте URL-адреса, на которые пользователи будут перенаправляться после аутентификации. Например, для локальной разработки это может быть http://localhost:4200.​
Нажмите «Create» для создания учетных данных.​
Получите Client ID и Client Secret:

После создания учетных данных появится окно с вашим Client ID и Client Secret.​
Сохраните эти данные в безопасном месте, так как они понадобятся для настройки аутентификации в вашем приложении.​
Подробные инструкции по созданию идентификатора веб-клиента OAuth доступны в справочном центре Google.​

После получения Client ID вы можете интегрировать его в ваше Angular-приложение для настройки аутентификации пользователей через Google.
=========================================================
//Компонент аутентификации
//Создайте новый компонент google-auth.component.ts:
import { Component, OnInit } from '@angular/core';
import { AuthService } from './auth.service';
import { Observable } from 'rxjs';

@Component({
  selector: 'app-google-auth',
  template: `
    <div *ngIf="!(isAuthenticated$ | async)">
      <button (click)="signIn()">Войти через Google</button>
    </div>
    <div *ngIf="isAuthenticated$ | async">
      <p>Вы вошли как: {{ (user$ | async)?.email }}</p>
      <button (click)="changePassword()">Изменить пароль</button>
      <button (click)="signOut()">Выйти</button>
    </div>
  `
})
export class GoogleAuthComponent implements OnInit {
  isAuthenticated$: Observable<boolean>;
  user$: Observable<any>;

  constructor(private authService: AuthService) {}

  ngOnInit() {
    this.isAuthenticated$ = this.authService.isAuthenticated$;
    this.user$ = this.authService.user$;
  }

  signIn() {
    this.authService.signInWithGoogle();
  }

  signOut() {
    this.authService.signOut();
  }

  changePassword() {
    this.authService.changePassword();
  }
}

-----------------------------------
Сервис аутентификации
Создайте auth.service.ts:
import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { map } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private user = new BehaviorSubject<any>(null);
  user$ = this.user.asObservable();

  isAuthenticated$: Observable<boolean> = this.user$.pipe(
    map(user => !!user)
  );

  constructor() {
    // Инициализация Google Sign-In API
    gapi.load('auth2', () => {
      gapi.auth2.init({
        client_id: 'YOUR_GOOGLE_CLIENT_ID.apps.googleusercontent.com'
      });
    });
  }

  signInWithGoogle() {
    const auth2 = gapi.auth2.getAuthInstance();
    auth2.signIn().then(
      googleUser => {
        const profile = googleUser.getBasicProfile();
        this.user.next({
          id: profile.getId(),
          name: profile.getName(),
          email: profile.getEmail()
        });
      },
      error => console.error('Ошибка входа через Google', error)
    );
  }

  signOut() {
    const auth2 = gapi.auth2.getAuthInstance();
    auth2.signOut().then(() => {
      this.user.next(null);
    });
  }

  changePassword() {
    // Здесь реализуйте логику смены пароля
    console.log('Смена пароля');
  }
}
-----------------------------------------------------------
В app.module.ts добавьте:
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';
import { GoogleAuthComponent } from './google-auth.component';

@NgModule({
  declarations: [AppComponent, GoogleAuthComponent],
  imports: [BrowserModule],
  bootstrap: [AppComponent]
})
export class AppModule { }
---------------------------------------------------------------
В index.html добавьте скрипт Google API:
<script src="https://apis.google.com/js/platform.js"></script>

