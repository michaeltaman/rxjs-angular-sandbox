import { Component, ViewEncapsulation } from '@angular/core';
import {
  FormBuilder,
  FormGroup,
  Validators,
  AbstractControl,
  ValidationErrors,
  ReactiveFormsModule,
  FormControl,
} from '@angular/forms';
import { CommonModule } from '@angular/common';
import {
  debounceTime,
  distinctUntilChanged,
  map,
  BehaviorSubject,
  timer,
  switchMap,
  tap,
  filter,
} from 'rxjs';
import { RoundSpinnerComponent } from '../../shared/round-spinner/round-spinner.component';
import { UserService } from '../../services/user.service';
import { ChangeDetectorRef } from '@angular/core';
import { RegisterUser } from '../../shared/models/user.model';
import { LoggingService } from '../../services/logging.service';

@Component({
  selector: 'app-user-registration',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule, RoundSpinnerComponent],
  templateUrl: './user-registration.component.html',
  styleUrls: ['./user-registration.component.scss'],
  encapsulation: ViewEncapsulation.None,
})
export class UserRegistrationComponent {
  registrationForm: FormGroup;
  passwordMismatch: boolean = false;
  emailExists = false;
  isCheckingEmail = false;
  isCheckingInvite = false;
  inviteCodeUsed = false;
  inviteCodeEnabled = false;
  inviteCodeInvalid = false; // ‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞

  private messageSubject = new BehaviorSubject<{
    text: string;
    type: 'success' | 'error';
  } | null>(null);
  message$ = this.messageSubject.asObservable();

  constructor(
    private fb: FormBuilder,
    private userService: UserService,
    private cdr: ChangeDetectorRef,
    private loggingService: LoggingService
  ) {
    this.registrationForm = this.fb.group({
      firstName: [
        '',
        [
          Validators.required,
          Validators.minLength(2),
          Validators.maxLength(15),
        ],
      ],
      lastName: [
        '',
        [
          Validators.required,
          Validators.minLength(2),
          Validators.maxLength(15),
        ],
      ],
      email: ['', [Validators.required, Validators.email]],
      password: [
        '',
        [Validators.required, Validators.minLength(8), this.passwordValidator],
      ],
      confirmPassword: ['', Validators.required],
      inviteCode: new FormControl({ value: '', disabled: true }), // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è `disabled`
    });

    this.registrationForm
      .get('email')
      ?.valueChanges.pipe(
        debounceTime(500),
        distinctUntilChanged(),
        tap(() => {
          this.isCheckingEmail = true;
        }),
        switchMap((email) =>
          this.userService
            .checkEmail(email)
            .pipe(tap(() => (this.isCheckingEmail = false)))
        )
      )
      .subscribe((response) => {
        this.emailExists = response.exists;
      });

    this.registrationForm
      .get('confirmPassword')
      ?.valueChanges.pipe(
        debounceTime(300),
        distinctUntilChanged(),
        map((value) => value !== this.registrationForm.get('password')?.value)
      )
      .subscribe((isMismatch) => {
        this.passwordMismatch = isMismatch;
      });

    let inviteCodeInitialized = false; // üöÄ –§–ª–∞–≥, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—é—â–∏–π –ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤
    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞ (–µ—Å–ª–∏ –ø–æ–ª–µ –∞–∫—Ç–∏–≤–Ω–æ)
    this.registrationForm
      .get('inviteCode')
      ?.valueChanges.pipe(
        debounceTime(500),
        distinctUntilChanged(),
        filter((code) => code && code.trim() !== ''), // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ –Ω–µ null –∏ –Ω–µ –ø—É—Å—Ç–æ–π
        tap(() => {
          this.isCheckingInvite = true;
          this.inviteCodeInvalid = false;
          this.inviteCodeUsed = false;
          this.registrationForm.get('inviteCode')?.updateValueAndValidity(); // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
        }),
        switchMap((code) =>
          this.userService
            .checkInviteCode(code)
            .pipe(tap(() => (this.isCheckingInvite = false)))
        )
      )
      .subscribe((response) => {
        if (!response.valid) {
          this.inviteCodeInvalid = true;
        } else if (response.used) {
          this.inviteCodeUsed = true;
        }
        this.registrationForm.get('inviteCode')?.updateValueAndValidity(); // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
      });
  }

  ngOnInit() {
    this.isCheckingEmail = true;
    this.isCheckingInvite = true;
    this.message$.subscribe((msg) => {
      this.loggingService.log(
        'userRegistrationComponent',
        'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI:',
        msg
      );
      this.cdr.detectChanges(); // ‚úÖ –§–æ—Ä—Å–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    });
  }

  passwordValidator(control: AbstractControl): ValidationErrors | null {
    if (!control.value) return null;
    const password = control.value;
    const hasUpperCase = /[A-Z]/.test(password);
    const hasSpecialChar = /[!@#$%^&*]/.test(password);
    const hasNumber = /\d/.test(password);
    return hasUpperCase && hasSpecialChar && hasNumber
      ? null
      : { passwordStrength: true };
  }

  toggleInviteCode(event: any) {
    this.loggingService.log(
      'userRegistrationComponent',
      '–ß–µ–∫–±–æ–∫—Å –∏–∑–º–µ–Ω—ë–Ω:',
      event.target.checked
    ); // üü¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    this.inviteCodeEnabled = event.target.checked;

    const inviteCodeControl = this.registrationForm.get('inviteCode');

    if (this.inviteCodeEnabled) {
      this.loggingService.log(
        'userRegistrationComponent',
        '‚úÖ –ü–æ–ª–µ –ò–Ω–≤–∞–π—Ç-–∫–æ–¥ –≤–∫–ª—é—á–µ–Ω–æ!'
      );
      inviteCodeControl?.enable({ emitEvent: false }); // ‚úÖ –í–∫–ª—é—á–∞–µ–º –ø–æ–ª–µ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π
      inviteCodeControl?.setValidators([Validators.required]); // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
    } else {
      this.loggingService.log(
        'userRegistrationComponent',
        '‚ùå –ü–æ–ª–µ –ò–Ω–≤–∞–π—Ç-–∫–æ–¥ –æ—Ç–∫–ª—é—á–µ–Ω–æ!'
      );
      inviteCodeControl?.setValue('');
      inviteCodeControl?.clearValidators(); // ‚ùå –£–±–∏—Ä–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
      inviteCodeControl?.disable({ emitEvent: false }); // ‚úÖ –û—Ç–∫–ª—é—á–∞–µ–º –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π
      this.inviteCodeUsed = false;
      this.inviteCodeInvalid = false;
    }

    inviteCodeControl?.updateValueAndValidity({ emitEvent: false });
  }

  onSubmit() {
    if (this.registrationForm.valid && !this.passwordMismatch) {
      const formData: RegisterUser = {
        firstName: this.registrationForm.value.firstName,
        lastName: this.registrationForm.value.lastName,
        email: this.registrationForm.value.email,
        password: this.registrationForm.value.password,
        invite_code: this.registrationForm.value.inviteCode || null,
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ name –æ—Ç–¥–µ–ª—å–Ω–æ –≤ –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
      const payload = {
        ...formData,
        name: `${formData.firstName} ${formData.lastName}`,
      };

      this.userService.register(payload).subscribe({
        next: (response) => {
          this.loggingService.log(
            'userRegistrationComponent',
            '‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:',
            response
          );
          this.showMessage('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!', 'success');
          this.registrationForm.reset();
        },
        error: (err) => {
          this.loggingService.error(
            'userRegistrationComponent',
            '‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:',
            err
          );
          const errorMessage = err.error?.detail
            ? Array.isArray(err.error.detail)
              ? err.error.detail.map((e: any) => e.msg).join(', ')
              : err.error.detail
            : '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';

          this.showMessage(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${errorMessage}`, 'error');
        },
      });
    } else {
      this.showMessage('‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º—É, –µ—Å—Ç—å –æ—à–∏–±–∫–∏!', 'error');
    }
  }

  private showMessage(text: string, type: 'success' | 'error') {
    this.loggingService.log(
      'userRegistrationComponent',
      `üîî showMessage() –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º: ${text}, —Ç–∏–ø: ${type}`
    );
    this.messageSubject.next({ text, type });
    this.cdr.detectChanges(); // ‚úÖ –§–æ—Ä—Å–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI

    timer(5000).subscribe(() => {
      this.loggingService.log(
        'userRegistrationComponent',
        '‚è≥ –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥'
      );
      this.messageSubject.next(null);
      this.cdr.detectChanges(); // ‚úÖ –°–Ω–æ–≤–∞ —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
    });
  }
}
