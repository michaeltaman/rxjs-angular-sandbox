import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { LoggingService } from './logging.service';

@Injectable({ providedIn: 'root' })
export class TokenService {
  private accessTokenLiveTime: number | null = null;
  private refreshTimer: ReturnType<typeof setTimeout> | null = null;

  constructor(private http: HttpClient, private logging: LoggingService) {}

  getAccessToken(): string | null {
    return sessionStorage.getItem('access_token');
  }

  getRefreshToken(): string | null {
    return sessionStorage.getItem('refresh_token');
  }

  saveTokens(access: string, refresh: string): void {
    sessionStorage.setItem('access_token', access);
    sessionStorage.setItem('refresh_token', refresh);
    this.logging.info('tokenService', '‚úÖ Tokens saved in sessionStorage', {
      access,
      refresh,
    });

    const payload = JSON.parse(atob(access.split('.')[1]));
    if (payload.exp) {
      this.accessTokenLiveTime = payload.exp * 1000 - Date.now();
      this.logging.info(
        'tokenService',
        `‚è≥ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞: ${this.accessTokenLiveTime / 1000} —Å–µ–∫`
      );
      this.startTokenRefresh();
    }
  }

  clearTokens(): void {
    sessionStorage.removeItem('access_token');
    sessionStorage.removeItem('refresh_token');
    this.logging.info('tokenService', 'üßπ –¢–æ–∫–µ–Ω—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ sessionStorage');

    if (this.refreshTimer !== null) {
      clearTimeout(this.refreshTimer);
      this.refreshTimer = null;
      this.logging.info(
        'tokenService',
        '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞'
      );
    }
  }

  isTokenExpired(): boolean {
    const token = this.getAccessToken();
    if (!token) return true;
    const jwtPayload = JSON.parse(atob(token.split('.')[1]));
    const exp = jwtPayload.exp * 1000;
    const now = Date.now();
    return exp - now <= 5000;
  }

  getTokenLifetime(): number | null {
    return this.accessTokenLiveTime;
  }

  setTokenLifetime(lifetime: number): void {
    this.accessTokenLiveTime = lifetime;
    this.logging.info(
      'tokenService',
      `üïê –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é: ${lifetime / 1000} —Å–µ–∫`
    );
  }

  refreshToken(): Observable<{ access_token: string; refresh_token: string }> {
    const refreshToken = this.getRefreshToken();
    if (!refreshToken) {
      this.logging.warn('tokenService', '‚ö†Ô∏è Refresh token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      return throwError(() => new Error('Refresh token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'));
    }

    this.logging.info('tokenService', 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...');
    return this.http.post<{ access_token: string; refresh_token: string }>(
      `${window.env.appConfig?.API_URL}/refresh-token`,
      { refresh_token: refreshToken }
    );
  }

  private calculateRefreshInterval(): number | null {
    const tokenLifetime = this.accessTokenLiveTime;

    if (
      window.env.authConfig?.refresh_active_token_interval === undefined ||
      tokenLifetime === null
    ) {
      this.logging.warn(
        'tokenService',
        '‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–∏—è window.env.refresh_active_token_interval –∏–ª–∏ tokenLifetime –Ω–µ–≤–µ—Ä–Ω—ã–µ'
      );
      return null;
    }

    const refreshInterval = Number(
      window.env.authConfig?.refresh_active_token_interval
    );

    this.logging.info(
      'tokenService',
      `üõ°Ô∏è tokenLifetime = ${tokenLifetime / 1000} —Å–µ–∫`
    );
    this.logging.info(
      'tokenService',
      `üõ°Ô∏è refreshInterval = ${refreshInterval} —Å–µ–∫`
    );

    if (refreshInterval <= 0) {
      this.logging.warn('tokenService', `‚ö†Ô∏è refreshInterval <= 0`);
      return null;
    }

    if (refreshInterval > tokenLifetime / 1000) {
      this.logging.warn(
        'tokenService',
        `üõ°Ô∏è ‚ö†Ô∏è refreshInterval (${refreshInterval}) > tokenLifetime (${
          tokenLifetime / 1000
        }) ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä`
      );
      return null;
    }

    this.logging.info(
      'tokenService',
      `üõ°Ô∏è ‚úÖ –¢–æ–∫–µ–Ω –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω —á–µ—Ä–µ–∑ ${refreshInterval} —Å–µ–∫—É–Ω–¥`
    );
    return refreshInterval;
  }

  startTokenRefresh(): void {
    if (this.refreshTimer) {
      clearTimeout(this.refreshTimer);
      this.logging.info(
        'tokenService',
        '‚è≥ –°—Ç–∞—Ä—ã–π —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–¥–∞–ª—ë–Ω –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ'
      );
    }

    const refreshInterval = this.calculateRefreshInterval();

    if (
      refreshInterval !== null &&
      refreshInterval > 0 &&
      this.accessTokenLiveTime !== null &&
      refreshInterval < this.accessTokenLiveTime
    ) {
      this.refreshTimer = setTimeout(() => {
        // üí° –í–æ—Ç —Å—é–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –ø–µ—Ä–µ–¥ subscribe()
        this.logging.info(
          'tokenService',
          'üîÅ ‚è∞ –¢–∞–π–º–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª ‚Äî –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω...'
        );

        this.refreshToken().subscribe({
          next: (tokens) => {
            this.logging.info(
              'tokenService',
              '‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –ø–æ —Ç–∞–π–º–µ—Ä—É'
            );
            this.saveTokens(tokens.access_token, tokens.refresh_token);
          },
          error: (err) => {
            this.logging.error(
              'tokenService',
              '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–æ —Ç–∞–π–º–µ—Ä—É:',
              err
            );
          },
        });
      }, refreshInterval * 1000);

      this.logging.info(
        'tokenService',
        `üõ°Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –Ω–∞ ${refreshInterval} —Å–µ–∫—É–Ω–¥`
      );
    } else if (this.accessTokenLiveTime && this.accessTokenLiveTime < 0) {
      this.logging.warn(
        'tokenService',
        `‚ö†Ô∏è –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ (${
          this.accessTokenLiveTime / 1000
        }) ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä`
      );
    }
  }
}
