import { Injectable } from '@angular/core';
import {
  HttpClient,
  HttpErrorResponse,
  HttpHeaders,
} from '@angular/common/http';
import { BehaviorSubject, Observable, of, throwError } from 'rxjs';
import { catchError, filter, map, take, tap } from 'rxjs/operators';
import { Router } from '@angular/router';
import { LoggingService } from './logging.service';

@Injectable({ providedIn: 'root' })
export class AuthService {
  private authStatusSubject = new BehaviorSubject<boolean>(false);
  authStatus$ = this.authStatusSubject.asObservable();
  private refreshInterval: ReturnType<typeof setInterval> | null = null;
  private INACTIVITY_ENABLED =
    window.env.authConfig?.logout_inactivity ?? false; //see README_auth.service.md
  private inactivityTimer!: ReturnType<typeof setTimeout>;
  private TOKEN_REFRESH_OFFSET_MS = 30000; //see README_auth.service.md
  private accessTokenLiveTime: number | null = null;

  private tokenLifetimeSubject = new BehaviorSubject<number | null>(null);

  constructor(
    private http: HttpClient,
    private router: Router,
    private loggingService: LoggingService
  ) {}

  login(email: string, password: string): Observable<string> {
    this.loggingService.log('authService', `üîë –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${email}`);
    return this.http
      .post<{ access_token: string; refresh_token: string }>(
        `${window.env.appConfig?.API_URL}/login`,
        { email, password }
      )
      .pipe(
        map((response) => {
          sessionStorage.setItem('access_token', response.access_token);
          sessionStorage.setItem('refresh_token', response.refresh_token);
          this.authStatusSubject.next(true);

          // ‚úÖ –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞
          const jwtPayload = JSON.parse(
            atob(response.access_token.split('.')[1])
          );
          if (jwtPayload.exp) {
            this.accessTokenLiveTime = jwtPayload.exp * 1000 - Date.now();
            this.loggingService.log(
              'authService',
              `‚úÖ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${
                this.accessTokenLiveTime / 1000
              } —Å–µ–∫—É–Ω–¥`
            );

            // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            this.tokenLifetimeSubject.next(this.accessTokenLiveTime);
            this.startTokenRefresh();
          }

          this.startInactivityTimer(); // ‚úÖ –°—Ç–∞—Ä—Ç—É–µ–º —Ç–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
          this.loggingService.log(
            'authService',
            '‚úÖ Tokens saved in sessionStorage:',
            response
          );

          return response.access_token;
        }),
        catchError((error) => {
          this.loggingService.error('authService', '‚ùå Login error:', error);
          return throwError(() => error);
        })
      );
  }

  refreshToken(): Observable<string> {
    const refreshToken = sessionStorage.getItem('refresh_token');
    if (!refreshToken) {
      this.loggingService.warn('authService', '‚ö†Ô∏è Refresh token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      this.logout();
      return throwError(() => new Error('Refresh token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'));
    }

    this.loggingService.log(
      'authService',
      'üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...'
    );
    return this.http
      .post<{ access_token: string; refresh_token: string }>(
        `${window.env.appConfig?.API_URL}/refresh-token`,
        { refresh_token: refreshToken }
      )
      .pipe(
        tap((tokens) => {
          this.loggingService.log(
            'authService',
            '‚úÖ Tokens saved in sessionStorage',
            tokens
          );

          sessionStorage.setItem('access_token', tokens.access_token);
          sessionStorage.setItem('refresh_token', tokens.refresh_token);

          const jwtPayload = JSON.parse(
            atob(tokens.access_token.split('.')[1])
          );
          if (jwtPayload.exp) {
            this.accessTokenLiveTime = jwtPayload.exp * 1000 - Date.now();

            this.loggingService.log(
              'authService',
              `‚úÖ Tokens saved in sessionStorage: ${
                this.accessTokenLiveTime / 1000
              } —Å–µ–∫—É–Ω–¥`
            );

            // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞
            this.tokenLifetimeSubject.next(this.accessTokenLiveTime);
            this.startTokenRefresh(); // ‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
          }
        }),
        map((tokens) => tokens.access_token),
        catchError((error) => {
          this.loggingService.error(
            'authService',
            '‚ùå Error refreshing token:',
            error
          );
          this.logout();
          return throwError(() => error);
        })
      );
  }

  private calculateRefreshInterval(): number | null {
    const tokenLifetime = this.accessTokenLiveTime;

    /*
    console.log(`XXX tokenLifetime = ${tokenLifetime}`);
    console.log(
      `XXX window.env.authConfig?.refresh_active_token_interval = ${window.env.authConfig?.refresh_active_token_interval}`
    );
    */

    if (
      window.env.authConfig?.refresh_active_token_interval === undefined ||
      tokenLifetime === null
    ) {
      this.loggingService.warn(
        'authService',
        '‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–∏—è window.env.refresh_active_token_interval –∏–ª–∏ tokenLifetime –Ω–µ–≤–µ—Ä–Ω—ã–µ'
      );
      return null;
    }

    const refreshInterval = Number(
      window.env.authConfig?.refresh_active_token_interval
    );

    this.loggingService.log(
      'authService',
      `üõ°Ô∏è tokenLifetime =  ${tokenLifetime / 1000} —Å–µ–∫—É–Ω–¥`
    );

    this.loggingService.log(
      'authService',
      `üõ°Ô∏è refreshInterval =  ${refreshInterval} `
    );

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (refreshInterval <= 0) {
      this.loggingService.warn('authService', `‚ö†Ô∏è refreshInterval <= 0`);
      return null;
    }

    // ‚úÖ –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä
    if (refreshInterval > tokenLifetime / 1000) {
      this.loggingService.warn(
        'authService',
        `üõ°Ô∏è ‚ö†Ô∏è –ü–æ—Å–∫–æ–ª—å–∫—É –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ ${
          tokenLifetime / 1000
        } —Å–µ–∫—É–Ω–¥ –º–µ–Ω—å—à–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π refresh_active_token_interval = ${
          window.env.authConfig?.refresh_active_token_interval
        } —Å–µ–∫—É–Ω–¥ ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –ø—Ä–∏ HTTP-–∑–∞–ø—Ä–æ—Å–µ`
      );
      return null;
    }

    this.loggingService.log(
      'authService',
      `üõ°Ô∏è ‚úÖ –¢–æ–∫–µ–Ω –±—É–¥–µ—Ç —Ä–∞—Ç–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª = ${refreshInterval} —Å–µ–∫—É–Ω–¥`
    );
    return refreshInterval;
  }

  setTokenLifetime(tokenLifetime: number) {
    this.accessTokenLiveTime = tokenLifetime;
    this.tokenLifetimeSubject.next(tokenLifetime);
  }

  startTokenRefresh(): void {
    if (this.refreshInterval) {
      clearTimeout(this.refreshInterval);
      this.loggingService.log(
        'authService',
        '‚è≥ –°—Ç–∞—Ä—ã–π —Ç–∞–π–º–µ—Ä —É–¥–∞–ª—ë–Ω –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ'
      );
    }

    const refreshInterval = this.calculateRefreshInterval();

    if (
      refreshInterval !== null &&
      refreshInterval > 0 &&
      this.accessTokenLiveTime !== null &&
      refreshInterval < this.accessTokenLiveTime
    ) {
      this.refreshInterval = setTimeout(() => {
        this.refreshToken().subscribe();
      }, refreshInterval * 1000);
      this.loggingService.log(
        'authService',
        `üõ°Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –Ω–∞ ${refreshInterval} —Å–µ–∫—É–Ω–¥`
      );
    } else if (this.accessTokenLiveTime && this.accessTokenLiveTime < 0) {
      this.loggingService.warn(
        'authService',
        `‚ö†Ô∏è –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ (${
          this.accessTokenLiveTime / 1000
        } —Å–µ–∫—É–Ω–¥) ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä`
      );
    }
  }

  public startInactivityTimer(): void {
    if (!this.authStatusSubject.value) return; // ‚úÖ –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á—ë–Ω –ª–∏ —Ç–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (!this.INACTIVITY_ENABLED) {
      this.loggingService.log(
        'authService',
        'üö´ –¢–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç–∫–ª—é—á—ë–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏'
      );
      return;
    }

    if (this.inactivityTimer) {
      clearTimeout(this.inactivityTimer);
    }

    const inactivityTimeout =
      window.env.authConfig?.logout_time != null &&
      window.env.authConfig?.logout_time !== 0
        ? window.env.authConfig?.logout_time
        : 5 * 60; // ‚úÖ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç

    this.loggingService.log(
      'authService',
      `‚è≥ –¢–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${inactivityTimeout} —Å–µ–∫—É–Ω–¥ (${(
        inactivityTimeout / 60
      ).toFixed(1)} –º–∏–Ω—É—Ç)`
    );

    this.inactivityTimer = setTimeout(() => {
      this.loggingService.warn(
        'authService',
        `‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ ${
          inactivityTimeout / 60
        } –º–∏–Ω—É—Ç ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ–º logout...`
      );
      this.logout(); // ‚úÖ –í—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∞—É—Ç
    }, inactivityTimeout * 1000);
  }

  public handleUserAction(): Observable<void> {
    if (this.isTokenExpired()) {
      this.loggingService.warn(
        'authService',
        'üîî Token close to expiration ‚Äî refreshing...'
      );
      return this.refreshToken().pipe(map(() => {}));
    }
    return of(void 0);
  }

  public isTokenExpired(): boolean {
    const token = sessionStorage.getItem('access_token');
    if (!token) return true;

    const jwtPayload = JSON.parse(atob(token.split('.')[1]));
    const exp = jwtPayload.exp * 1000;
    const now = Date.now();

    return exp - now <= 5000; // ‚úÖ –°—á–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫—à–∏–º –∑–∞ 5 —Å–µ–∫—É–Ω–¥ –¥–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
  }

  public logout(): void {
    this.loggingService.log('authService', 'üö™ Logging out...');
    sessionStorage.removeItem('access_token');
    sessionStorage.removeItem('refresh_token');
    this.authStatusSubject.next(false);

    if (this.refreshInterval !== null) {
      clearInterval(this.refreshInterval);
      this.refreshInterval = null;
    }

    if (this.inactivityTimer) {
      clearTimeout(this.inactivityTimer);
    }

    this.router.navigate(['/login']);
  }

  public restoreSession(): void {
    const accessToken = sessionStorage.getItem('access_token');
    if (accessToken) {
      this.loggingService.log(
        'authService',
        'üîë Restoring session with token:',
        accessToken
      );

      this.authStatusSubject.next(true);

      const jwtPayload = JSON.parse(atob(accessToken.split('.')[1]));
      if (jwtPayload.exp) {
        this.accessTokenLiveTime = jwtPayload.exp * 1000 - Date.now();
        this.tokenLifetimeSubject.next(this.accessTokenLiveTime);

        // ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        this.startTokenRefresh();
      }
    }
  }
}
