from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from app.database import get_db
from app.crud import authenticate_user, save_refresh_token, revoke_refresh_token
from app.security import create_access_token, create_refresh_token, verify_token
from app.schemas import LoginRequest, TokenResponse, RefreshTokenRequest
from app.models import User  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
from datetime import datetime, timezone

router = APIRouter()

# ‚úÖ –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–æ–≥–∏–Ω)
@router.post("/login/", response_model=TokenResponse)
def login(request: LoginRequest, db: Session = Depends(get_db)):
    user = authenticate_user(db, request.email, request.password)
    if not user:
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

    access_token = create_access_token({"sub": user.email})
    refresh_token = create_refresh_token({"sub": user.email})
    save_refresh_token(db, user, refresh_token)

    return {"access_token": access_token, "refresh_token": refresh_token, "token_type": "bearer"}

# ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Access-—Ç–æ–∫–µ–Ω–∞
@router.post("/refresh-token/", response_model=TokenResponse)
def refresh_token(request: RefreshTokenRequest, db: Session = Depends(get_db)):
    print(f"üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞: {request.refresh_token}")

    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º refresh_token
    payload = verify_token(request.refresh_token)
    if not payload:
        raise HTTPException(status_code=401, detail="–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π Refresh-—Ç–æ–∫–µ–Ω")

    print(f"‚úÖ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω payload: {payload}")

    # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ user_id
    try:
        user_id = int(payload["sub"])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º sub –≤ int
    except ValueError:
        print(f"üö® –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id –≤ —Ç–æ–∫–µ–Ω–µ: {payload['sub']}")
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id –≤ —Ç–æ–∫–µ–Ω–µ")

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        print(f"üö® –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        raise HTTPException(status_code=401, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.email}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ refresh_token
    if user.refresh_token != request.refresh_token:
        raise HTTPException(status_code=401, detail="Refresh-—Ç–æ–∫–µ–Ω –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç")

    print(f"üîë Refresh-—Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.email}")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
    new_access_token = create_access_token(user.id)  # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û!
    new_refresh_token = create_refresh_token(user.id)  # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û!

    # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º refresh_token –∏ last_updated –≤ –ë–î
    user.refresh_token = new_refresh_token
    user.last_updated = datetime.now(timezone.utc)  # –°—Ç–∞–≤–∏–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC
    db.commit()

    print(f"‚úÖ –ù–æ–≤—ã–π access_token: {new_access_token}")
    print(f"‚úÖ –ù–æ–≤—ã–π refresh_token: {new_refresh_token}")
    print(f"üïí –ü–æ–ª–µ last_updated –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {user.last_updated}")

    return {
        "access_token": new_access_token,
        "refresh_token": new_refresh_token,
        "token_type": "bearer",
    }

