from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from app.database import get_db
from app.schemas import UserCreate, UserResponse, LoginRequest, TokenResponse
from app.crud import (
    create_user,
    get_user_by_email,
    check_invite_code,
    mark_code_as_used,
    save_refresh_token
)
from app.security import create_refresh_token, create_access_token, verify_password
from app.models import User # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç!
from app.schemas import UserProfileResponse  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç!
from app.security import get_current_user  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç!

router = APIRouter()

# ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.post("/register/", response_model=UserResponse)
def register_user(user: UserCreate, db: Session = Depends(get_db)):
    if get_user_by_email(db, user.email):
        raise HTTPException(status_code=400, detail="–≠—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!")

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º invite-–∫–æ–¥ (–µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω)
    role = "user"
    invite_code = user.invite_code  # ‚úÖ –ß–∏—Ç–∞–µ–º invite-–∫–æ–¥ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    if invite_code:
        valid_code = check_invite_code(db, invite_code)
        if not valid_code:
            raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π invite-–∫–æ–¥")
        role = "admin"
        mark_code_as_used(db, invite_code)  # –ü–æ–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π

    # ‚úÖ –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_user = create_user(db, user, role)

    # ‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º refresh-—Ç–æ–∫–µ–Ω
    refresh_token = create_refresh_token(new_user.id)
    save_refresh_token(db, new_user, refresh_token)

    return new_user


# ‚úÖ –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–æ–≥–∏–Ω)
@router.post("/login/", response_model=TokenResponse)
def login_user(login_data: LoginRequest, db: Session = Depends(get_db)):
    user = get_user_by_email(db, login_data.email)
    if not user or not verify_password(login_data.password, user.password):
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

    # ‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º access –∏ refresh —Ç–æ–∫–µ–Ω—ã
    access_token = create_access_token(user.id)
    refresh_token = create_refresh_token(user.id)

    # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh-—Ç–æ–∫–µ–Ω –≤ –ë–î
    save_refresh_token(db, user, refresh_token)

    return {"access_token": access_token, "refresh_token": refresh_token}


# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è email (—É–∂–µ –±—ã–ª–æ)
@router.get("/check-email/")
def check_email(email: str, db: Session = Depends(get_db)):
    exists = get_user_by_email(db, email) is not None
    return {"exists": exists}


# ‚úÖ –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç /profile
@router.get("/profile/", response_model=UserProfileResponse)
def get_profile(current_user: User = Depends(get_current_user), db: Session = Depends(get_db)):
    user = db.query(User).filter(User.id == current_user.id).first()

    if not user:
        print(f"üîéUser not found")
        return {"message": "User not found"}

    return UserProfileResponse(
        id=user.id,
        name=user.name,
        email=user.email,
        role=user.role,
        avatar=user.avatar if user.avatar else None,  # –ü–æ–∫–∞ –∞–≤–∞—Ç–∞—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å `NULL`
        created_at=user.created_at
    )

