# –§–∞–π–ª app/admin.py –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–∞—Ä–æ–ª—è –°—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∞–¥–º–∏–Ω–∞.
import secrets
from fastapi import APIRouter, HTTPException
from app.database import get_db_connection
from app.security import hash_password, verify_password
from app.schemas import AdminRegistration

router = APIRouter()

# üìå 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è –°—É–ø–µ—Ä–ê–¥–º–∏–Ω–∞
@router.post("/generate-admin-password")
def generate_admin_password():
    conn = get_db_connection()
    cur = conn.cursor()

    cur.execute("SELECT id FROM super_admin")
    existing = cur.fetchone()

    if existing:
        cur.close()
        conn.close()
        raise HTTPException(status_code=403, detail="‚ùå –ü–∞—Ä–æ–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω!")

    new_password = secrets.token_urlsafe(12)
    hashed_password = hash_password(new_password)

    cur.execute("INSERT INTO super_admin (secret_password) VALUES (%s)", (hashed_password,))
    conn.commit()

    cur.close()
    conn.close()

    return {"password": new_password}  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑


# üìå 2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.post("/register-admin")
def register_admin(data: AdminRegistration):
    conn = get_db_connection()
    cur = conn.cursor()

    cur.execute("SELECT secret_password FROM super_admin")
    super_admin = cur.fetchone()

    if not super_admin or not verify_password(data.secret, super_admin[0]):
        cur.close()
        conn.close()
        raise HTTPException(status_code=403, detail="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –°—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞!")

    cur.execute("SELECT id FROM users WHERE email = %s", (data.email,))
    if cur.fetchone():
        cur.close()
        conn.close()
        raise HTTPException(status_code=400, detail="‚ùå –≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")

    hashed_password = hash_password(data.password)

    cur.execute(
        "INSERT INTO users (name, email, password, role) VALUES (%s, %s, %s, %s) RETURNING id, name, email, role",
        ("Admin", data.email, hashed_password, "admin"),
    )
    new_admin = cur.fetchone()
    conn.commit()

    cur.close()
    conn.close()

    return {"message": "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", "admin": {"id": new_admin[0], "email": new_admin[2], "role": new_admin[3]}}
